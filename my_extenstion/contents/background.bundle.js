(()=>{"use strict";const e={register_language:async()=>{const e="undefined"!=typeof browser?browser.declarativeNetRequest:chrome.declarativeNetRequest,t="undefined"!=typeof browser?browser.runtime:chrome.runtime;try{await new Promise(((r,a)=>{e.updateDynamicRules({removeRuleIds:[1,2,3],addRules:[{id:1,priority:1,action:{type:"redirect",redirect:{transform:{queryTransform:{addOrReplaceParams:[{key:"lang",value:"vi"}]}}}},condition:{regexFilter:"^https://zcaptcha\\.api\\.zaloapp\\.com/",resourceTypes:["main_frame","sub_frame","xmlhttprequest"]}},{id:2,priority:1,action:{type:"redirect",redirect:{transform:{queryTransform:{addOrReplaceParams:[{key:"hl",value:"en-US"}]}}}},condition:{regexFilter:"^(http|https)://[^\\.]*\\.(google\\.com|recaptcha\\.net)/recaptcha",resourceTypes:["sub_frame"]}},{id:3,priority:1,action:{type:"modifyHeaders",requestHeaders:[{header:"Accept-Language",operation:"set",value:"en-US,en;q=0.9"}]},condition:{urlFilter:"*",resourceTypes:["main_frame","sub_frame","xmlhttprequest","script","stylesheet","image","object","ping","csp_report","media","font","websocket","webtransport","webbundle","other"]}}]},(()=>{t.lastError?(console.error(`[bapi] Error updating dynamic rules: ${t.lastError.message}`),a(new Error(`Error updating dynamic rules: ${t.lastError.message}`))):(console.debug("[bapi] Successfully updated dynamic rules"),r())}))}))}catch(e){throw console.error("[bapi] Error in register_language:",e),e}}},t=e,r={API_KEY:{key:"api_key",defaultValue:""},POWER_ON:{key:"power_on",defaultValue:!0},TIKTOK:{key:"tiktok",defaultValue:{delayClick:500,delaySwipe:15,loop:!0,isActive:!0}},FUNCAPTCHA:{key:"funcaptcha",defaultValue:{delayClick:100,loop:!0,isActive:!0,maxImageCaptcha:1e4}},ZALO:{key:"zalo",defaultValue:{delayClick:100,loop:!0,isActive:!0}},SHOPEE:{key:"shopee",defaultValue:{delaySwipe:15,loop:!0,isActive:!0}},RECAPTCHAV2:{key:"reCaptchav2",defaultValue:{delayClick:500,loop:!0,isActive:!0,useToken:!1}},AMZN:{key:"amzn",defaultValue:{delayClick:100,loop:!0,isActive:!0}},GEETEST:{key:"geetest",defaultValue:{delayClick:500,delaySwipe:15,loop:!0,isActive:!0}},GARENA:{key:"garena",defaultValue:{delayClick:500,delaySwipe:15,loop:!0,isActive:!0}}};let a=Promise.resolve();const o=async(e,t)=>{const r="undefined"!=typeof browser?browser.storage.local:chrome.storage.local,o="undefined"!=typeof browser?browser.runtime:chrome.runtime;try{return a=a.then((()=>new Promise(((a,n)=>{r.set({[e]:t},(()=>{o.lastError?n(new Error(`Error setting ${e}: ${o.lastError.message}`)):(console.debug(`[storageHelpers] Setting ${e}:`,t),a(!0))}))})))),await a,!0}catch(t){throw console.error(`[storageHelpers] Error setting ${e}:`,t),t}};async function n(e){return new Promise((t=>setTimeout(t,e)))}const s={GET_BALANCE_URL:"https://api.omocaptcha.com/v2/getBalance",CREATE_JOB_URL:"https://api.omocaptcha.com/v2/createTask",GET_RESULT_URL:"https://api.omocaptcha.com/v2/getTaskResult",REPORT_URL:"https://api.omocaptcha.com/v2/report"};t.register_language();const c=async()=>{const e="undefined"!=typeof browser?browser.runtime:chrome.runtime,t="undefined"!=typeof browser?browser.storage.local:chrome.storage.local;try{if((await t.get("initialized")).initialized)console.debug("[background] Extension already initialized");else{console.debug("[background] First time running extension");const t=await fetch(e.getURL("configs.json"));if(!t.ok)throw new Error(`Failed to fetch configs.json: ${t.status}`);const a=await t.json();console.debug("[background] Config data loaded:",a);const s={[r.API_KEY.key]:r.API_KEY.defaultValue,[r.POWER_ON.key]:r.POWER_ON.defaultValue,[r.TIKTOK.key]:r.TIKTOK.defaultValue,[r.FUNCAPTCHA.key]:r.FUNCAPTCHA.defaultValue,[r.ZALO.key]:r.ZALO.defaultValue,[r.SHOPEE.key]:r.SHOPEE.defaultValue,[r.RECAPTCHAV2.key]:r.RECAPTCHAV2.defaultValue,[r.AMZN.key]:r.AMZN.defaultValue,[r.GEETEST.key]:r.GEETEST.defaultValue};console.debug("[background] Default values:",s);const c=async function(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:3;for(let a=1;a<=r;a++)try{return await o(e,t),void console.debug(`[background] Successfully set ${e} on attempt ${a}`)}catch(t){if(console.warn(`[background] Failed to set ${e} on attempt ${a}: ${t.message}`),a===r)throw console.error(`[background] Failed to set ${e} after ${r} attempts`),new Error(`Failed to set ${e}: ${t.message}`);await n(500)}};await Promise.all([...Object.entries(s).map((e=>{let[t,r]=e;return c(t,r)})),...Object.entries(a).map((e=>{let[t,r]=e;return c(t,r)})),c("initialized",!0)]),console.debug("[background] Extension initialization completed")}}catch(e){throw console.error("[background] Error initializing extension:",e),e}},i="undefined"!=typeof browser?browser.runtime:chrome.runtime;let l,u,d;i.onStartup.addListener((async()=>{console.debug("[background] Extension started"),await c()})),i.onInstalled.addListener((async()=>{console.debug("[background] Extension installed"),await c()})),l=s.CREATE_JOB_URL,u=s.GET_RESULT_URL,d=s.REPORT_URL,i.onMessage.addListener(((e,t,r)=>{switch(console.debug("[background] Received message:",{type:e.type,source:e.source,sender:t.tab?`Tab ${t.tab.id}`:"Unknown",url:t.url}),e.type){case"getURL":return async function(e,t){const r="undefined"!=typeof browser?browser.tabs:chrome.tabs;if(e.tab&&e.tab.id)try{const a=await r.get(e.tab.id);console.debug("[background] Tab URL:",a.url),t(a.url)}catch(e){console.error("[background] Error getting tab URL:",e),t("")}else t("")}(t,r),!0;case"createTask":return async function(e,t){try{const r=await fetch(l,{method:"POST",headers:{"Content-Type":"application/json"},body:e});if(!r.ok)throw new Error(`HTTP error! Status: ${r.status}`);const a=await r.json();0===Number(a.errorId)?(console.debug("[background] Job created:",a.taskId),t(a.taskId)):(console.warn("[background] API returned an error:",a.errorCode,a.errorDescription),t(""))}catch(e){console.error("[background] Error creating task:",e),t("")}}(e.data,r),!0;case"getTaskResult":return async function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:30,r=arguments.length>2?arguments[2]:void 0;try{const a=Date.now();for(;Date.now()-a<=1e3*t;){await n(500);try{const t=await fetch(u,{method:"POST",headers:{"Content-Type":"application/json"},body:e});if(!t.ok){console.warn(`[background] HTTP error! Status: ${t.status}`);continue}const a=await t.json();if(console.debug("[background] Job result:",a),a.status&&("ready"===a.status||"fail"===a.status))return void r(a)}catch(e){console.error("[background] Error fetching task result:",e),await n(1e3)}}r("")}catch(e){console.error("[background] Error in getTaskResult:",e),r("")}}(e.data.data,e.data.timeWait,r),!0;case"reportTask":return async function(e,t){0;try{const r={id:e.taskIds||[],isSuccess:e.result,crxVersion:i.getManifest().version},a=await fetch(d,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!a.ok)throw new Error(`HTTP error! Status: ${a.status}`);const o=await a.json();console.debug("[background] Report sent: "+(e.result?"Success":"Failure"),o),t(o)}catch(e){console.error("[background] Failed to send report:",e),t("")}}(e.data,r),!0;case"createImageBase64":return async function(e,t){try{const r=await fetch(e),a=await r.blob(),o=new FileReader;o.onloadend=()=>{const e=o.result.split(",")[1];t(e)},o.onerror=()=>{console.error("[background] Failed to read blob"),t("")},o.readAsDataURL(a)}catch(e){console.error("[background] Failed to fetch image:",e),t("")}}(e.data.url,r),!0;default:return console.error("[background] Unknown request type:",e.type),r(""),!0}}))})();